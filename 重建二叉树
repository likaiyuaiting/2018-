**题目描述**
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
**思路：递归**
```c++
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int findIndex(vector<int> vin, int tag){
		for (int i = 0; i<vin.size(); i++){
			if (vin[i] == tag)return i;
		}
		return 0;
	}
	TreeNode* reConstructBinaryTree(vector<int> pre, vector<int> vin) {
		if (pre.size() != 0){
			TreeNode* p = new TreeNode(pre[0]);
			int k = findIndex(vin, pre[0]);
			vector<int> leftPre(pre.begin() + 1, pre.begin() + k + 1);
			vector<int> leftVin(vin.begin(), vin.begin() + k);
			p->left = reConstructBinaryTree(leftPre, leftVin);

			vector<int> rightPre(pre.begin() + k + 1, pre.end());
			vector<int> rightVin(vin.begin() + k + 1, vin.end());
			p->right = reConstructBinaryTree(rightPre, rightVin);
			return p;
		}
		return NULL;
	}
};
```
